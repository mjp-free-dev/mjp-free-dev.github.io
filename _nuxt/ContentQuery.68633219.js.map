{"version":3,"file":"ContentQuery.68633219.js","sources":["../../../../node_modules/.pnpm/@nuxt+content@2.7.2/node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots, watch } from \"vue\";\nimport { computed, useAsyncData, queryContent } from \"#imports\";\nexport default defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    /**\n     * The path of the content to load from content source.\n     */\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Select a subset of fields\n     */\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Remove a subset of fields\n     */\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter results\n     */\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Sort results\n     */\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Limit number of results\n     */\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Skip number of results\n     */\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    /**\n     * Filter contents based on locale\n     */\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    /**\n     * A type of query to be made.\n     */\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    watch(() => props, () => refresh(), { deep: true });\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne();\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find();\n          }\n          return queryBuilder.findSurround(path.value);\n        }\n        return queryBuilder.find();\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  /**\n   * Content not found fallback\n   * @slot not-found\n   */\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      // Setup\n      data,\n      refresh,\n      isPartial,\n      // Props\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (slots?.empty && data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\n</script>\n"],"names":["_sfc_main","props","path","only","without","where","sort","limit","skip","locale","find","toRefs","isPartial","computed","_a","watch","refresh","data","useAsyncData","hash","queryBuilder","queryContent","ctx","slots","useSlots","slot","data2","h"],"mappings":"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","x_google_ignoreList":[0]}